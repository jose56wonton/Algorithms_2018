

public class Vertex {

    private ArrayList<Edge> neighborhood;
016
    private String label;
017

018
    /**
019
     *
020
     * @param label The unique label associated with this Vertex
021
     */
022
    public Vertex(String label){
023
        this.label = label;
024
        this.neighborhood = new ArrayList<Edge>();
025
    }
026

027

028
    /**
029
     * This method adds an Edge to the incidence neighborhood of this graph iff
030
     * the edge is not already present.
031
     *
032
     * @param edge The edge to add
033
     */
034
    public void addNeighbor(Edge edge){
035
        if(this.neighborhood.contains(edge)){
036
            return;
037
        }
038

039
        this.neighborhood.add(edge);
040
    }
041

042

043
    /**
044
     *
045
     * @param other The edge for which to search
046
     * @return true iff other is contained in this.neighborhood
047
     */
048
    public boolean containsNeighbor(Edge other){
049
        return this.neighborhood.contains(other);
050
    }
051

052
    /**
053
     *
054
     * @param index The index of the Edge to retrieve
055
     * @return Edge The Edge at the specified index in this.neighborhood
056
     */
057
    public Edge getNeighbor(int index){
058
        return this.neighborhood.get(index);
059
    }
060

061

062
    /**
063
     *
064
     * @param index The index of the edge to remove from this.neighborhood
065
     * @return Edge The removed Edge
066
     */
067
    Edge removeNeighbor(int index){
068
        return this.neighborhood.remove(index);
069
    }
070

071
    /**
072
     *
073
     * @param e The Edge to remove from this.neighborhood
074
     */
075
    public void removeNeighbor(Edge e){
076
        this.neighborhood.remove(e);
077
    }
078

079

080
    /**
081
     *
082
     * @return int The number of neighbors of this Vertex
083
     */
084
    public int getNeighborCount(){
085
        return this.neighborhood.size();
086
    }
087

088

089
    /**
090
     *
091
     * @return String The label of this Vertex
092
     */
093
    public String getLabel(){
094
        return this.label;
095
    }
096

097

098
    /**
099
     *
100
     * @return String A String representation of this Vertex
101
     */
102
    public String toString(){
103
        return "Vertex " + label;
104
    }
105

106
    /**
107
     *
108
     * @return The hash code of this Vertex's label
109
     */
110
    public int hashCode(){
111
        return this.label.hashCode();
112
    }
113

114
    /**
115
     *
116
     * @param other The object to compare
117
     * @return true iff other instanceof Vertex and the two Vertex objects have the same label
118
     */
119
    public boolean equals(Object other){
120
        if(!(other instanceof Vertex)){
121
            return false;
122
        }
123

124
        Vertex v = (Vertex)other;
125
        return this.label.equals(v.label);
126
    }
127

128
    /**
129
     *
130
     * @return ArrayList<Edge> A copy of this.neighborhood. Modifying the returned
131
     * ArrayList will not affect the neighborhood of this Vertex
132
     */
133
    public ArrayList<Edge> getNeighbors(){
134
        return new ArrayList<Edge>(this.neighborhood);
135
    }
136

137
}
